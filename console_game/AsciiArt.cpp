#include "AsciiArt.h"

#include <algorithm>

std::string chars[27][7]{
    {
        "      .o.      ",
        "     .888.     ",
        "    .8\"888.    ",
        "   .8' `888.   ",
        "  .88ooo8888.  ",
        " .8'     `888. ",
        "o88o     o8888o",
    },
    {
        "oooooooooo. ",
        "`888'   `Y8b",
        " 888     888",
        " 888oooo888'",
        " 888    `88b",
        " 888    .88P",
        "o888bood8P' ",
    },
    {
        "  .oooooo. ",
        " d8P'  `Y8b",
        "888        ",
        "888        ",
        "888        ",
        "`88b    ooo",
        " `Y8bood8P'",
    },
    {
        "oooooooooo.  ",
        "`888'   `Y8b ",
        " 888      888",
        " 888      888",
        " 888      888",
        " 888     d88'",
        "o888bood8P'  ",
    },
    {
        "oooooooooooo",
        "`888'     `8",
        " 888        ",
        " 888oooo8   ",
        " 888    \"   ",
        " 888       o",
        "o888ooooood8",
    },
    {
        "oooooooooooo",
        "`888'     `8",
        " 888        ",
        " 888oooo8   ",
        " 888    \"   ",
        " 888        ",
        "o888o       ",
    },
    {
        "  .oooooo.   ",
        " d8P'  `Y8b  ",
        "888          ",
        "888          ",
        "888     ooooo",
        "`88.    .88' ",
        " `Y8bood8P'  ",
    },
    {
        "ooooo   ooooo",
        "`888'   `888'",
        " 888     888 ",
        " 888ooooo888 ",
        " 888     888 ",
        " 888     888 ",
        "o888o   o888o",
    },
    {
        "ooooo",
        "`888'",
        " 888 ",
        " 888 ",
        " 888 ",
        " 888 ",
        "o888o",
    },
    {
        "   oooo",
        "   `888",
        "    888",
        "    888",
        "    888",
        ".o. 88P",
        "`Y888P ",
    },
    {
        "oooo    oooo",
        "`888   .8P' ",
        " 888  d8'   ",
        " 88888[     ",
        " 888`88b.   ",
        " 888  `88b. ",
        "o888o  o888o",
    },
    {
        "ooooo       ",
        "`888'       ",
        " 888        ",
        " 888        ",
        " 888        ",
        " 888       o",
        "o888ooooood8",
    },
    {
        "ooo        ooooo",
        "`88.       .888'",
        " 888b     d'888 ",
        " 8 Y88. .P  888 ",
        " 8  `888'   888 ",
        " 8    Y     888 ",
        "o8o        o888o",
    },
    {
        "ooooo      ooo",
        "`888b.     `8'",
        " 8 `88b.    8 ",
        " 8   `88b.  8 ",
        " 8     `88b.8 ",
        " 8       `888 ",
        "o8o        `8 ",
    },
    {
        "  .oooooo.  ",
        " d8P'  `Y8b ",
        "888      888",
        "888      888",
        "888      888",
        "`88b    d88'",
        " `Y8bood8P' ",
    },
    {
        "ooooooooo.  ",
        "`888   `Y88.",
        " 888   .d88'",
        " 888ooo88P' ",
        " 888        ",
        " 888        ",
        "o888o       ",
    },
    {
        "  .oooooo.     ",
        " d8P'  `Y8b    ",
        "888      888   ",
        "888      888   ",
        "888      888   ",
        "`88b    d88b   ",
        " `Y8bood8P'Ybd'",
    },
    {
        "ooooooooo.  ",
        "`888   `Y88.",
        " 888   .d88'",
        " 888ooo88P' ",
        " 888`88b.   ",
        " 888  `88b. ",
        "o888o  o888o",
    },
    {
        " .oooooo..o",
        "d8P'    `Y8",
        "Y88bo.     ",
        " `\"Y8888o. ",
        "     `\"Y88b",
        "oo     .d8P",
        "8\"\"88888P' ",
    },
    {
        "ooooooooooooo",
        "8'   888   `8",
        "     888     ",
        "     888     ",
        "     888     ",
        "     888     ",
        "    o888o    ",
    },
    {
        "ooooo     ooo",
        "`888'     `8'",
        " 888       8 ",
        " 888       8 ",
        " 888       8 ",
        " `88.    .8' ",
        "   `YbodP'   ",
    },
    {
        "oooooo     oooo",
        " `888.     .8' ",
        "  `888.   .8'  ",
        "   `888. .8'   ",
        "    `888.8'    ",
        "     `888'     ",
        "      `8'      ",
    },
    {
        "oooooo   oooooo     oooo",
        " `888.    `888.     .8' ",
        "  `888.   .8888.   .8'  ",
        "   `888  .8'`888. .8'   ",
        "    `888.8'  `888.8'    ",
        "     `888'    `888'     ",
        "      `8'      `8'      ",
    },
    {
        "ooooooo  ooooo",
        " `8888    d8' ",
        "   Y888..8P   ",
        "    `8888'    ",
        "   .8PY888.   ",
        "  d8'  `888b  ",
        "o888o  o88888o",
    },
    {
        "oooooo   oooo",
        " `888.   .8' ",
        "  `888. .8'  ",
        "   `888.8'   ",
        "    `888'    ",
        "     888     ",
        "    o888o    ",
    },
    {
        " oooooooooooo",
        "d'\"\"\"\"\"\"d888'",
        "      .888P  ",
        "     d888'   ",
        "   .888P     ",
        "  d888'    .P",
        ".8888888888P ",
    },
    {
        "888",
        "888",
        "888",
        "888",
        "   ",
        "d8b",
        "Y8P",
    }};

AsciiArt::AsciiArt(std::string str)
{
	transform(str.begin(), str.end(), str.begin(), tolower);
	for (const auto& c : str)
		for (int i = 0; i < line_num; i++)
			if (c == '!')
				ascii_art[i] += chars[26][i] + ' ';
			else
				ascii_art[i] += chars[static_cast<int>(c) - 'a'][i] + ' ';
	strings_len = ascii_art[0].size();
}